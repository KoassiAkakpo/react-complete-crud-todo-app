{"version":3,"sources":["loading.gif","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Todo","_ref","todo","index","deleteTodo","editingTodo","react_default","a","createElement","name","onClick","className","App","state","newTodo","editing","editingIndex","notification","todos","loading","apiUrl","alert","_this","setState","setTimeout","handleChange","event","target","value","addTodo","_callee","response","regenerator_default","wrap","_context","prev","next","axios","post","concat","sent","abrupt","Object","toConsumableArray","data","stop","this","_callee2","_context2","delete","id","splice","updateTodo","_callee3","_context3","put","get","_this2","type","placeholder","onChange","disabled","length","src","loadingGif","alt","map","components_Todo","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ff24ea7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.1b1a27ca.gif\";","import React from \"react\";\r\n\r\nconst Todo = ({ todo, index, deleteTodo, editingTodo }) => {\r\n  return (\r\n    <tr>\r\n      <td>{todo.name} </td>\r\n      <td>\r\n        <button\r\n          onClick={() => editingTodo(index)}\r\n          className=\"btn btn-primary mr-4\"\r\n        >\r\n          Update\r\n        </button>\r\n        <button onClick={() => deleteTodo(index)} className=\"btn btn-danger\">\r\n          Delete\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\nimport Todo from \"./components/Todo\";\nimport axios from \"axios\";\nimport loadingGif from \"./loading.gif\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    newTodo: \"\",\n    editing: false,\n    editingIndex: null,\n    notification: null,\n    todos: [],\n    loading: true\n  };\n\n  apiUrl = \"https://5bf7d3d85cd31800137928ee.mockapi.io\";\n\n  async componentDidMount() {\n    const response = await axios.get(`${this.apiUrl}/todos`);\n    this.setState({\n      todos: response.data,\n      loading: false\n    });\n  }\n\n  alert = notification => {\n    this.setState({ notification });\n    setTimeout(() => {\n      this.setState({ notification: null });\n    }, 2000);\n  };\n\n  handleChange = event => {\n    const newTodo = event.target.value;\n    this.setState({ newTodo });\n    //console.log(event.target.name, event.target.value);\n  };\n  /*\n  generateId = () => {\n    const lastTodo = this.state.todos[this.state.todos.length - 1];\n    if (lastTodo) {\n      return lastTodo.id + 1;\n    }\n    return 1;\n  };\n*/\n  addTodo = async () => {\n    const name = this.state.newTodo;\n\n    const response = await axios.post(`${this.apiUrl}/todos`, {\n      name\n    });\n    //console.log(response);\n\n    if (!name) return;\n    const todos = [...this.state.todos, response.data];\n    this.setState({ todos, newTodo: \"\" });\n    this.alert(\"Todo Succefully created\");\n  };\n\n  deleteTodo = async index => {\n    const todos = [...this.state.todos];\n    const todo = todos[index];\n    await axios.delete(`${this.apiUrl}/todos/${todo.id}`);\n\n    todos.splice(index, 1);\n    this.setState({ todos });\n    this.alert(\"Todo Delete Succefully\");\n  };\n\n  editingTodo = index => {\n    const todo = this.state.todos[index];\n    this.setState({\n      editing: true,\n      newTodo: todo.name,\n      editingIndex: index\n    });\n  };\n\n  updateTodo = async () => {\n    const todo = this.state.todos[this.state.editingIndex];\n    const response = await axios.put(`${this.apiUrl}/todos/${todo.id}`, {\n      name: this.state.newTodo\n    });\n\n    //if (!todo.name) return;\n    const todos = this.state.todos;\n    todos[this.state.editingIndex] = response.data;\n    this.setState({ todos, editing: false, editingIndex: null, newTodo: \"\" });\n    this.alert(\"Todo Update Succefully\");\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"text-center\">Complete CRUD App</h1>\n        {this.state.notification && (\n          <div className=\"alert alert-success mt-2\">\n            <h5 className=\"text-center\">{this.state.notification}</h5>\n          </div>\n        )}\n        <div className=\"form-group\">\n          <input\n            name=\"todo\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Add new todo ...\"\n            onChange={this.handleChange}\n            value={this.state.newTodo}\n          />\n          <button\n            className=\"btn btn-info form-control mt-2\"\n            onClick={this.state.editing ? this.updateTodo : this.addTodo}\n            disabled={this.state.newTodo.length < 5}\n          >\n            {this.state.editing ? \"Update Todo\" : \"Add Todo\"}\n          </button>\n          {this.state.loading && (\n            <img src={loadingGif} alt=\"\" className=\"loading\" />\n          )}\n        </div>\n        {!this.state.loading && !this.state.todos.length && (\n          <h3 className=\"text-center mt-2\">\n            No todo to display!!! Add some todos...\n          </h3>\n        )}\n        {(this.state.loading || !this.state.editing) && (\n          <table className=\"table\">\n            <tbody>\n              {this.state.todos.map((todo, index) => (\n                <Todo\n                  todo={todo}\n                  index={index}\n                  key={todo.id}\n                  deleteTodo={this.deleteTodo}\n                  editingTodo={this.editingTodo}\n                />\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}